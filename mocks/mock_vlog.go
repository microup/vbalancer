// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/vlog/vlog.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockILog is a mock of ILog interface.
type MockILog struct {
	ctrl     *gomock.Controller
	recorder *MockILogMockRecorder
}

// MockILogMockRecorder is the mock recorder for MockILog.
type MockILogMockRecorder struct {
	mock *MockILog
}

// NewMockILog creates a new mock instance.
func NewMockILog(ctrl *gomock.Controller) *MockILog {
	mock := &MockILog{ctrl: ctrl}
	mock.recorder = &MockILogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILog) EXPECT() *MockILogMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockILog) Add(values ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Add", varargs...)
}

// Add indicates an expected call of Add.
func (mr *MockILogMockRecorder) Add(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockILog)(nil).Add), values...)
}

// Close mocks base method.
func (m *MockILog) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockILogMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockILog)(nil).Close))
}
